#!/bin/ipython
# Note: ipy file suffix neccessary for running with %run magic

# Import our repo as a module
#import ai_analysis

## Logging
import logging
import sys

logger = logging.getLogger()
fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(fmt)

# File handler - log everything in a file to avoid slowing down notebooks
fhandler = logging.FileHandler(filename='session.log', mode='a')
fhandler.setFormatter(formatter)
logger.addHandler(fhandler)
fhandler.setLevel(logging.DEBUG)

# Stream handler - warnings in the terminal where jupyter starts
if sys.stdout != sys.__stdout__:
  shandler = logging.StreamHandler(sys.__stdout__)
  shandler.setLevel(logging.WARNING)
  shandler.setFormatter(formatter)
  logger.addHandler(shandler)

# General level
logger.setLevel(logging.INFO)

## Plotting
try:
  %matplotlib inline
except:
  logger.warning("Couldn't configure matplotlib inline backend.")

## Reload changed code
%load_ext autoreload
%autoreload 2

## Import basic scientific stack
import numpy as np
import scipy as sp
import pandas as pd
import matplotlib.pyplot as plt

#Some styling for the plots
import matplotlib
matplotlib.rc('font',size=12,family='serif',serif='Times New Roman')
matplotlib.rc('xtick', labelsize=12) 
matplotlib.rc('ytick', labelsize=12)
matplotlib.rc('axes',labelsize='large')
matplotlib.rc('legend',fontsize='large')
matplotlib.rc('legend',**{'fontsize':12})
#matplotlib.rc('text',usetex=True)


#from matplotlib import rc
#rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
#rc('font',**{'family':'serif','serif':['Times']})
#rc('text', usetex=True)


## Paths
# project directory e.g. `/home/user/GIT/nesta`
#project_dir = ai_analysis.project_dir
#data_path = f'{project_dir}/data'
